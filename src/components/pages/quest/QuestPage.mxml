<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					contentCreationComplete="init();"
					xmlns:toppanel="components.pages.world.toppanel.*"
					xmlns:leftpanel="components.pages.quest.leftpanel.*"
					xmlns:bottompanel="components.pages.quest.bottompanel.*"
					xmlns:rightpanel="components.pages.quest.rightpanel.*"
					xmlns:subbottompanel="components.pages.quest.subbottompanel.*"
					width="100%" height="100%" xmlns:game="components.pages.game.*"
					>
	
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.ApplicationView;
			import components.common.game.questgameresult.QuestResultObject;
			import components.common.quests.medals.MedalType;
			import components.common.tutorial.TutorialPartType;
			import components.pages.game.windows.pregame.PreGameW;
			import components.pages.game.windows.results.FightResultW;
			import components.pages.quest.windows.result.QuestResultW;
			import components.pages.quest.windows.start.QuestStartW;
			import components.pages.world.windows.quests.QuestsW;
			
			import engine.bombss.BombType;
			import engine.utils.Utils;
			
			import mx.controls.Alert;
			import mx.managers.PopUpManager;

        private function init():void {

            Context.Model.addCustomListener(ContextEvent.MAIN_TAB_CHANGED, function (e:ContextEvent):void {
                if (e.data == ApplicationView.TAB_NAME_QUEST) {
                    
					Context.Model.dispatchCustomEvent(ContextEvent.NEED_TO_SHOW_WORLD_ANIMATION, false);
					
					focusGroup.visible = false;
                    Context.Model.dispatchCustomEvent(ContextEvent.QUEST_START_SHOW);
                    gameView.everyGameTabOpeningInit();
					
                }
            });


            Context.Model.addCustomListener(ContextEvent.QUEST_START_SHOW, function (e:ContextEvent):void 
			{
                var qsw:QuestStartW = new QuestStartW();
                qsw.questObject = Context.Model.questManager.getQuestObject(Context.Model.questIdLastOpened);

				if(Context.Model.currentTutorialPart != TutorialPartType.DONE)
				{
					parentApplication.setStyle("modalTransparency",0.4);
					parentApplication.setStyle("modalTransparencyColor",0x000000);
					
					PopUpManager.addPopUp(qsw, (parentApplication as Bombers), true);
				}else
				{
                	PopUpManager.addPopUp(qsw, (parentApplication as Bombers), false);
				}
				
                PopUpManager.centerPopUp(qsw);

                qsw.y -= 90;
                qsw.x += 40;
            });

            Context.Model.addCustomListener(ContextEvent.QUEST_END_SHOW, function (e:ContextEvent):void {
                var qew:QuestResultW = new QuestResultW();
                qew.questResultObject = e.data;

				if(Context.Model.currentTutorialPart != TutorialPartType.DONE)
				{
					parentApplication.setStyle("modalTransparency",0.4);
					parentApplication.setStyle("modalTransparencyColor",0x000000);
					PopUpManager.addPopUp(qew, (parentApplication as Bombers), true);
				}else
				{
					PopUpManager.addPopUp(qew, (parentApplication as Bombers), false);
				}
              
                PopUpManager.centerPopUp(qew);

                qew.y -= 90;
                qew.x += 40;
            });

			
			Context.Model.addCustomListener(ContextEvent.QUEST_SET_GAME_FOCUS, function (e: ContextEvent): void
			{	
				focusGroup.visible = true;
			});

            /* walk */
            stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown);
            stage.addEventListener(KeyboardEvent.KEY_UP, keyUp);

            /* testing */
             /* Context.Model.dispatchCustomEvent(ContextEvent.QUEST_END_SHOW,
             new QuestResultObject(
             true,
             MedalType.GOLD_MEDAL
             )
             );    */

        }

        private function keyDown(event:KeyboardEvent):void {
            if (Utils.isArrowKey(event.keyCode)) {
                if (Context.gameModel.isPlayingNow)
                    Context.game.playerManager.me.addDirection(Utils.arrowKeyCodeToDirection(event.keyCode))
            } else if (event.keyCode == Keyboard.SPACE) {
                if (Context.gameModel.isPlayingNow)
                    Context.game.playerManager.me.setBomb(BombType.REGULAR);
            } else if (event.keyCode == 88) {   //x
                if (Context.gameModel.isPlayingNow)
                    Context.game.playerManager.me.tryActivateWeapon();
            } else if (event.keyCode == 90) {   //z
                //Context.gameModel.increaseWeaponIndex()
            }
        }

        private function keyUp(event:KeyboardEvent):void {
            if (Utils.isArrowKey(event.keyCode)) {
                if (Context.game != null)
                    Context.game.playerManager.me.removeDirection(Utils.arrowKeyCodeToDirection(event.keyCode))
            }
        }
        ]]>
	</fx:Script>
	
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0x000000"/>
		</s:fill>
	</s:Rect>
	
	<game:GameView id="gameView" y="{topPanel.height + 2}" x="{leftPanel.width}"/>
	
	<s:Group id="focusGroup"
			 y="{topPanel.height + 7}" x="{leftPanel.width + 5}" 
			 click="{focusGroup.visible = false;}"
			 visible="false"
			 buttonMode="true" useHandCursor="true"
			 >
		<s:Rect width="671" height="430"
				radiusX="55" radiusY="55"
				alpha="0.84"
				>
			<s:fill>
				<s:SolidColor color="0x000000" />
			</s:fill>
		</s:Rect>	
		
		<s:HGroup width="671" height="430"
				  horizontalAlign="center" verticalAlign="middle">
			<s:Label text="{'Кликни сюда\nдля начала'}" fontFamily="mpbc" fontSize="72" color="0xfed000" textAlign="center" />
		</s:HGroup>
	</s:Group>
	
	<toppanel:TopPanelView id="topPanel" y="0"/>
	
	<subbottompanel:SubBottomPanelView y="526"/>
	
	<leftpanel:LeftPanelView id="leftPanel" y="41"/>
	<bottompanel:BottomPanelView y="485"/>
	<rightpanel:RightPanelView y="41" x="787"/>
	
	
</s:NavigatorContent>