<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 creationComplete="init();"
		 >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.common.base.CommonConstans;
			import components.common.quests.QuestObject;
			
			import mx.controls.Alert;
			
			public var timer:Timer = new Timer(1000, 1000);
			private var questTimeStart: int = 0;
			private var questTime: int = 0;
			
			private static const BAR_LENGTH: int = 76;
			
			//private var realBarLength: int = BAR_LENGTH
			[Bindable]
			private var barLength: Number = BAR_LENGTH;
			private var barDecreasingPerSecond: Number = 0;
			
			private function init(): void
			{
				timer.addEventListener(TimerEvent.TIMER, timerTick);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerComplete);
				
				var qo: QuestObject = Context.Model.questManager.getQuestObject(Context.Model.questIdLastOpened);
				questTime = questTimeStart = qo.timeLimit + CommonConstans.SECONDS_TO_START_QUEST;
				timeLabel.text = getTimeStringView(questTime);
				barDecreasingPerSecond = barLength/questTime;
				
				
				Context.Model.addCustomListener(ContextEvent.QUEST_TIME_SET, function (e: ContextEvent): void
				{
					if(e.data is int)
					{
						questTime = questTimeStart = e.data;
						timeLabel.text = getTimeStringView(questTime);
						barLength = BAR_LENGTH;
						refreshTimer();
					}
				});
				
				Context.Model.addCustomListener(ContextEvent.QUEST_TIME_START, function (e: ContextEvent): void
				{
					timer.start();
				});
				
				Context.Model.addCustomListener(ContextEvent.QUEST_TIME_STOP, function (e: ContextEvent): void
				{
					timer.stop();
				});
			}
			
			private function timerComplete(e: TimerEvent): void
			{
				timer.reset();
				timer.start();
			}
			
			private function timerTick(e: TimerEvent): void
			{
				if(questTime > 0)
				{
					timeLabel.text = getTimeStringView(questTime);
					questTime--;
					barLength -= barDecreasingPerSecond;
				}else
				{
					timer.stop();
				}
			}
			
			public function refreshTimer(): void
			{
				timer.reset();
				timer.stop();
			}
			
			public static function getTimeStringView(timeSeconds: int): String
			{
				var res: String = " сек";
				
				var minutes: int = Math.floor(timeSeconds / 60);
				var seconds: int = timeSeconds - minutes * 60;
				
				var secondsStringView:String = seconds.toString();
				
				if(seconds < 10)
				{
					secondsStringView = "0"+seconds.toString();
				}
				
				res = minutes.toString() + " : "+secondsStringView + res;
				
				return res;
			}
			
		]]>
	</fx:Script>
	
	<s:Group x="14" y="9">
		<s:BitmapImage source="@Embed(source='assets/pagequests/time/bgBar.png')" smooth="true" />
		<s:BitmapImage mask="{progressMask}" y="3" x="3" source="@Embed(source='assets/pagequests/time/progressBar.png')" smooth="true" />
	</s:Group>
	
	<s:BorderContainer id="progressMask" width="{barLength}" x="17" y="12" backgroundColor="0xffffff" height="18"/>
	
	<s:BitmapImage source="@Embed(source='assets/pagequests/time/watch.png')" smooth="true" />
	
	<s:HGroup x="18" y="9" width="100%" height="23" horizontalAlign="center" verticalAlign="middle">
		<s:Label id="timeLabel" color="0xffc600" text="12 мин 45 сек" fontFamily="mpbc" fontSize="14" />
	</s:HGroup>
	
</s:Group>
