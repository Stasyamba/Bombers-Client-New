<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:mx1="library://ns.adobe.com/flex/halo"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 creationComplete="panelCreationComplete();"
		 borderVisible="false"
		 dropShadowVisible="false"
		 skinClass="skins.common.EmptyPopUpS"
		 width="337" height="274"
		 xmlns:flexcomponents="components.common.flexcomponents.*"
		 implements="components.common.base.window.IWindow"
		 xmlns:preloaders="components.common.utils.preloaders.*"
		 xmlns:pregame="components.pages.game.windows.pregame.*"
		 xmlns:start="components.pages.quest.windows.start.*"
		 >

	<fx:Script>
		<![CDATA[
			import skins.buttons.CloseButtonOriginS;
			import skins.buttons.Pattern1ButtonS;
		]]>
	</fx:Script>

	<fx:Declarations>

		<s:Sequence id="disapearingAnimation" effectEnd="{close();}">
			<s:Animate target="{this}" duration="200">
				<s:SimpleMotionPath property="alpha"
									valueFrom="{this.alpha}"
									valueTo="0"
									/>
			</s:Animate>
		</s:Sequence>

		<s:Sequence id="apearingAnimation">
			<s:Animate target="{this}" duration="200">
				<s:SimpleMotionPath property="alpha"
									valueFrom="0" valueTo="1"
									/>
			</s:Animate>
		</s:Sequence>

		<s:Sequence id="pulseA" targets="{[glowFilter1, glowFilter2]}"
					repeatCount="10000"
					>
			<s:Animate duration="500">
				<s:SimpleMotionPath property="alpha" valueFrom="0.5" valueTo="1" />
			</s:Animate>

			<s:Animate duration="500">
				<s:SimpleMotionPath property="alpha" valueFrom="1" valueTo="0.5" />
			</s:Animate>
		</s:Sequence>

	</fx:Declarations>

	<fx:Script>
		<![CDATA[
		import components.pages.world.windows.tutorial.part2.TutorialQuestEndToolTip;
		import components.common.tutorial.TutorialPartType;
        import components.ApplicationView;
        import components.common.game.questgameresult.QuestResultObject;
        import components.common.quests.QuestObject;
        import components.common.resources.ResourceType;
        import components.common.quests.medals.MedalType;
        import components.common.quests.medals.MedalObject;
        import components.common.base.access.AccessManager;
        import components.common.base.access.rules.AccessRuleObject;
        import components.common.base.access.rules.AccessRuleType;
        import components.common.base.access.rules.IAccessRule;
        import components.common.base.access.rules.itemrule.AccessItemRule;
        import components.common.base.access.rules.levelrule.AccessLevelRule;
        import components.common.base.access.rules.locationrule.AccessOpenedLocationsRule;
        import components.common.items.ItemProfileObject;
        import components.common.items.ItemType;
        import components.common.worlds.locations.LocationType;
        import components.common.worlds.locations.LocationViewObject;

        import mx.controls.Alert;
        import mx.core.IVisualElement;
        import mx.managers.PopUpManager;

        public var questResultObject:QuestResultObject = null;
        private var questObject:QuestObject;

        public function close():void {
            PopUpManager.removePopUp(this);
        }

        public function closeWrapper():void {
            disapearingAnimation.play();
        }

		private function medalRefresh(e: ContextEvent): void	
		{
			
		}
			
        private function panelCreationComplete():void {

			Context.Model.currentSettings.gameProfile.clearQuestWeapon();
			
			Context.Model.addCustomListener(ContextEvent.QUEST_MEDAL_REFRESH, medalRefresh);
			Context.Model.dispatchCustomEvent(ContextEvent.GLOBAL_INVENTORY_BUTTON_ENABLED, true);

            questObject = Context.Model.questManager.getQuestObject(Context.Model.questIdLastOpened);
            energyCostLabel.text = questObject.energyCost.toString();
			
            if (questResultObject != null) 
			{
				var bestMedal: MedalType = MedalType.BRONZE_MEDAL;
				
				/* have got new medals */
				//questResultObject.isNew = true;
				var medalsAlreadyHaveCount: int = 0;
				
				for each(var mt: MedalType in questResultObject.medals)
				{
					if(Context.Model.currentSettings.gameProfile.hasMedal(Context.Model.questIdLastOpened, mt))
					{
						medalsAlreadyHaveCount++;
						//questResultObject.isNew = false;
					}else
					{
						if(bestMedal.isLessOrEqual(mt))
						{
							bestMedal = mt;
						}
					}
				}
				
				if (medalsAlreadyHaveCount == questResultObject.medals.length)
				{
					resultTitleLabel.text = "Новая медаль!";
					pulseA.play();
					
					Context.Model.currentSettings.gameProfile.addMedal(questObject.id, questResultObject.medals);
					
					switch (bestMedal) 
					{
						case MedalType.GOLD_MEDAL:
							goldMedal.visible = true;
							break;
						case MedalType.SILVER_MEDAL:
							silverMedal.visible = true;
							break;
						case MedalType.BRONZE_MEDAL:
							bronzeMedal.visible = true;
							break;
					}
					
				} else {
					resultTitleLabel.text = "Нет новых медалей";
				}
				
				
				
                var medals:Array = Context.Model.currentSettings.gameProfile.medals.concat();
				//var currentMedalsType: Array = new Array();

				

				var gotGold:Boolean = false;
				var gotSilver:Boolean = false;
				var gotBronze:Boolean = false;

				for each(var mo:MedalObject in medals)
				{
					if (mo.questId == questObject.id)
					{
						switch (mo.medalType) {
							case MedalType.GOLD_MEDAL:
								gotGold = true;
								break;
							case MedalType.SILVER_MEDAL:
								gotSilver = true;
								break;
							case MedalType.BRONZE_MEDAL:
								gotBronze = true;
								break;
						}
					}
				}


                goldTask.initTask(questObject.getTask(MedalType.GOLD_MEDAL), gotGold);
                silverTask.initTask(questObject.getTask(MedalType.SILVER_MEDAL), gotSilver);
                bronzeTask.initTask(questObject.getTask(MedalType.BRONZE_MEDAL), gotBronze);


				if(Context.Model.currentTutorialPart != TutorialPartType.DONE)
				{
					bonusGroup.addElement(new TutorialQuestEndToolTip());
					startQuestButton.enabled = false;
				}
				
				Context.gameServer.sendStartQuestSubmit(
					Context.Model.questIdLastOpened, 
					Context.Model.questToken, 
					gotBronze, gotSilver, gotGold);

            } else {
                Alert.show("Error with passing data | QuestResultW.mxml");
                close();
            }
        }

        private function startQuest():void {
            if (Context.Model.currentSettings.gameProfile.energy < questObject.energyCost) {
                Context.Model.dispatchCustomEvent(ContextEvent.NEED_TO_OPEN_ENERGY_MARKET);
            } else {
                closeWrapper();

                Context.gameModel.createQuestFailed.addOnce(function():void {
                    Alert.show("Error - reсreate Quest Failed | QuestResultW.mxml");
                    Context.gameModel.questGameCreated.removeAll()
                });

                Context.gameModel.questGameCreated.addOnce(function ():void {
                    Context.Model.dispatchCustomEvent(ContextEvent.QUEST_START_SHOW);
                    Context.gameModel.createQuestFailed.removeAll()
                })
                Context.gameModel.tryCreateQuest(questObject.id, LocationType.byValue(questObject.locationId))
            }
        }

        private function quit():void {

			if(Context.Model.currentTutorialPart != TutorialPartType.DONE)
			{
				/* send server request */
				Context.gameServer.sendSetTutorialPart(TutorialPartType.PART3);
				Context.Model.currentTutorialPart = TutorialPartType.PART3;
				Context.Model.dispatchCustomEvent(ContextEvent.TUTORIAL_OPEN_PART3);
			}

            closeWrapper();
            Context.Model.dispatchCustomEvent(ContextEvent.NEED_TO_CHANGE_MAIN_TAB, ApplicationView.TAB_NAME_WORLD);

            Context.gameModel.leaveCurrentQuest()
        }
        ]]>
	</fx:Script>
	<s:layout>
		<s:BasicLayout/>
	</s:layout>

	<s:Group>
		<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bg.jpg')"
						   backgroundImageFillMode="repeat"
						   width="100%" height="100%"
						   cornerRadius="60"
						   borderVisible="true"
						   borderColor="0x322a17" borderWeight="3"
						   />

		<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bgDark.jpg')"
						   backgroundImageFillMode="repeat"
						   width="331" x="3" y="3" height="123"
						   cornerRadius="60"
						   borderVisible="false"
						   />

		<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bg.jpg')"
						   backgroundImageFillMode="repeat"
						   width="331" x="3" height="70"
						   y="61"
						   cornerRadius="0"
						   borderVisible="false"
						   />

		<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bgDark.jpg')"
						   backgroundImageFillMode="repeat"
						   width="331" x="3" y="{274-123}" height="123"
						   cornerRadius="60"
						   borderVisible="false"
						   />
		<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bg.jpg')"
						   backgroundImageFillMode="repeat"
						   width="331" x="3" height="70"
						   y="{274-124}"
						   cornerRadius="0"
						   borderVisible="false"
						   />

		<s:VGroup width="100%" height="100%"
				  horizontalAlign="center" verticalAlign="top"
				  gap="15"
				  >

			<s:HGroup width="100%" height="57"
					  horizontalAlign="center" verticalAlign="middle">
				<s:Label id="resultTitleLabel" text="Нет новых медалей" fontFamily="mpbc" color="0xbbb17a" fontSize="22" />
			</s:HGroup>

			<s:VGroup height="153" horizontalAlign="left" verticalAlign="top"
					  paddingTop="15">
				<start:TaskViewSlot id="bronzeTask" />
				<start:TaskViewSlot id="silverTask" />
				<start:TaskViewSlot id="goldTask" />
			</s:VGroup>

			<s:HGroup width="100%" horizontalAlign="center" paddingTop="-7" >
				<s:HGroup verticalAlign="middle" paddingLeft="-40">

					<s:HGroup  width="76" horizontalAlign="right">
						<s:Label id="energyCostLabel" text="5" color="0xfed400" fontFamily="mpbc" fontSize="30" />
						<s:HGroup paddingTop="-5" scaleX="0.7" scaleY="0.7">
							<s:BitmapImage source="@Embed(source='assets/pageworld/toppanel/energy/energySign.png')"
										   smooth="true"
										   />
						</s:HGroup>
					</s:HGroup>

					<flexcomponents:PatternButton id="startQuestButton" skinClass="skins.buttons.Pattern3ButtonS"
												  buttonMode="true" useHandCursor="true"
												  customLabel="Повторить"
												  fontSize="28" fontSizeOver="28"
												  scaleX="0.8" scaleY="0.8"
												  click="startQuest();"
												  fontColor="0xfff19f"
												  />
				</s:HGroup>

			</s:HGroup>

		</s:VGroup>

		<flexcomponents:CloseButton skinClass="skins.buttons.CloseButtonOriginS" x="270" y="15" scale="0.6"
									click="quit();"
									/>

		<s:Group x="-30" y="-30">
			<s:BitmapImage id="bronzeMedal" visible="false" source="@Embed(source='assets/pagequests/medals/bronze.png')" />
			<s:BitmapImage id="silverMedal" visible="false" source="@Embed(source='assets/pagequests/medals/silver.png')" />
			<s:BitmapImage id="goldMedal" visible="false" source="@Embed(source='assets/pagequests/medals/gold.png')" />

			<s:filters>
				<s:GlowFilter id="glowFilter3" alpha="1" color="0xffb400" strength="1" blurX="35" blurY="35" />
				<!--<s:GlowFilter id="glowFilter4" alpha="1" color="0xffb400" strength="1" blurX="35" blurY="35" />-->
			</s:filters>

		</s:Group>

		<s:filters>
			<s:DropShadowFilter alpha="0.3" />
			<s:GlowFilter id="glowFilter1" alpha="0" color="0xffb400" strength="1" blurX="35" blurY="35" />
			<s:GlowFilter id="glowFilter2" alpha="0" color="0xffb400" strength="1" blurX="35" blurY="35" />
		</s:filters>
	</s:Group>

	<s:Group id="bonusGroup" x="353" y="56" />

	<s:controlBarContent/>
</s:Panel>