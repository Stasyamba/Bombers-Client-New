<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:mx1="library://ns.adobe.com/flex/halo"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 creationComplete="panelCreationComplete();"
		 borderVisible="false"
		 dropShadowVisible="false"
		 skinClass="skins.common.EmptyPopUpS"
		 width="367" height="394"
		 alpha="0" 
		 xmlns:daybonus="components.pages.world.windows.daybonus.*" 
		 xmlns:flexcomponents="components.common.flexcomponents.*" 
		 >
	<fx:Script>
		<![CDATA[
			import components.common.resources.ResourceType;
			
			import skins.buttons.Pattern2ButtonS;
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<s:Sequence id="disapearingAnimation" effectEnd="{close();}">
			<s:Animate target="{this}" duration="200">
				<s:SimpleMotionPath property="alpha"
									valueFrom="{this.alpha}"
									valueTo="0"
									/>
			</s:Animate>
		</s:Sequence>
		
		<s:Parallel id="apearingAnimation" startDelay="200">
			<s:Animate target="{this}" duration="700">
				<s:SimpleMotionPath property="alpha"
									valueFrom="{this.alpha}"
									valueTo="1"
									/>
			</s:Animate>
			
			<s:Animate target="{this}" duration="700">
				<s:SimpleMotionPath property="scaleX"
									valueFrom="0.3"
									valueTo="1"
									/>
			</s:Animate>
			
			<s:Animate target="{this}" duration="700">
				<s:SimpleMotionPath property="scaleY"
									valueFrom="0.3"
									valueTo="1"
									/>
			</s:Animate>
		</s:Parallel>
		
		<s:Sequence id="pulseA" repeatCount="400"
					targets="{[glow1, glow2, glow3, glow4, glow5, glow6]}"
					>
			
			<s:Animate duration="500">
				<s:SimpleMotionPath property="alpha"
									valueFrom="0.5"
									valueTo="1"
									/>
			</s:Animate>
			
			<s:Animate duration="500">
				<s:SimpleMotionPath property="alpha"
									valueFrom="1"
									valueTo="0.5"
									/>
			</s:Animate>
			
			
		</s:Sequence>
		
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.common.items.ItemType;
			import components.common.items.ItemProfileObject;
			import components.common.resources.ResourcePrice;
			import components.common.tutorial.TutorialPartType;
			import components.pages.global.newlevel.rewards.RewardEnergyContent;
			import components.pages.global.newlevel.rewards.RewardItemContent;
			import components.pages.global.newlevel.rewards.RewardResourceContent;
			import components.common.quests.regard.RegardType;
			import components.common.quests.regard.RegardObject;
			import components.common.game.multygameresult.PrizeObject;
			import components.common.superoffer.SuperOfferObject;
			
			import mx.managers.PopUpManager;
			
			public var rewards: Array = new Array();
			private var newResources:ResourcePrice;
			private var isNewItem:Boolean = false;
			
			public function close():void {
				
				PopUpManager.removePopUp(this);
			}
			
			public function closeWrapper():void {
				disapearingAnimation.play();
			}
			
			private function panelCreationComplete():void {
				apearingAnimation.play();
				pulseA.play();
				
				/* get level by experiance */
				/* get pizes by level */
				
				/* testing */
				/* var rewards: Array = new Array();
				rewards.push(new RegardObject(RegardType.RESOURCE_GOLD, 100));
				rewards.push(new RegardObject(RegardType.RESOURCE_ITEM, 1)); */
			
				for each(var ro: RegardObject in rewards)
				{
					var content: * = null;
					
					switch(ro.type)
					{
						case RegardType.RESOURCE_ADAMANT:
							
							content = new RewardResourceContent();
							(content as RewardResourceContent).initContent(ro);
							
							break;
							
						case RegardType.RESOURCE_ANTIMATTER:
							
							content = new RewardResourceContent();
							(content as RewardResourceContent).initContent(ro);
							
							break;
							
						case RegardType.RESOURCE_CRYSTALS:
							
							content = new RewardResourceContent();
							(content as RewardResourceContent).initContent(ro);
							
							break;
							
						case RegardType.RESOURCE_GOLD:
							
							content = new RewardResourceContent();
							(content as RewardResourceContent).initContent(ro);
							
							break;
						
						case RegardType.RESOURCE_ITEM:
							
							content = new RewardItemContent();
							(content as RewardItemContent).initContent(ro.amount);
							
							break;
						
						case RegardType.RESOURCE_ENERGY:
							
							content = new RewardEnergyContent();
							(content as RewardEnergyContent).initContent(ro.amount);
							
							break;
						
						case RegardType.RESOURCE_EXP:
							break;
					}
					
					if(content != null)
					{
						prizeGroup.addElement(content);
					}
				}
				
				newResources = Context.Model.currentSettings.gameProfile.resources.clone();
				//var newEnegy: int;
				
				for each(ro in rewards)
				{
					switch(ro.type)
					{
						case RegardType.RESOURCE_ADAMANT:
							newResources.add(new ResourcePrice(0,0,ro.amount, 0));
							break;
						
						case RegardType.RESOURCE_ANTIMATTER:
							newResources.add(new ResourcePrice(0,0,0,ro.amount));
							break;
						
						case RegardType.RESOURCE_CRYSTALS:
							newResources.add(new ResourcePrice(0,ro.amount,0,0));
							break;
						
						case RegardType.RESOURCE_GOLD:
							newResources.add(new ResourcePrice(ro.amount,0,0,0));
							break;
						
						case RegardType.RESOURCE_ITEM:
							
							Context.Model.currentSettings.gameProfile.gotItems.push(
								new ItemProfileObject(
														ItemType.byValue((ro as RegardObject).itemId),
														(ro as RegardObject).amount)
							); 
							Context.Model.currentSettings.gameProfile.packItems.push(
								new ItemProfileObject(
									ItemType.byValue((ro as RegardObject).itemId),
									(ro as RegardObject).amount)
							); 
							
							isNewItem = true;
							
							break;
						
						case RegardType.RESOURCE_ENERGY:
							
							
							break;
						
						case RegardType.RESOURCE_EXP:
							break;
					}
					
				}
			}
			
			private function closeWrapper1(e:ContextEvent): void
			{
				closeWrapper();
			}
			
			private function nextTutorialStep(): void
			{
				Context.gameServer.sendSetTutorialPart(TutorialPartType.PART5);
				Context.Model.currentTutorialPart = TutorialPartType.PART5;
				Context.Model.dispatchCustomEvent(ContextEvent.TUTORIAL_OPEN_PART5);
				
				closeWrapper();
			}
			
			private function getLevel(): void
			{
				if(Context.Model.currentTutorialPart != TutorialPartType.DONE)
				{
					nextTutorialStep();
				}else
				{
					closeWrapper();
				}
				
				Context.Model.currentSettings.gameProfile.resources = newResources.clone();
				Context.Model.dispatchCustomEvent(ContextEvent.IM_NEW_ITEM, true);
				Context.Model.dispatchCustomEvent(ContextEvent.GP_RESOURCE_CHANGED);
			}
			
		]]>
	</fx:Script>
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bgDark.jpg')"
					   backgroundImageFillMode="repeat"
					   width="100%" height="100%"
					   cornerRadius="47"
					   borderVisible="false"
					   >
		<s:filters>
			<s:GlowFilter id="glow4" color="0xf6da00" alpha="0.8" blurX="20" blurY="20" />
			<s:GlowFilter id="glow5" color="0xf6da00" alpha="0.8" blurX="30" blurY="30" />
			<s:GlowFilter id="glow6" color="0xf6da00" alpha="0.8" blurX="40" blurY="40" />
		</s:filters>
		
	</s:BorderContainer>
	
	<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bg.jpg')"
					   backgroundImageFillMode="repeat"
					   width="227" height="100%"
					   x="0" y="0"
					   cornerRadius="47"
					   borderVisible="false"
					   />
	
	<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bgDark.jpg')"
					   backgroundImageFillMode="repeat"
					   width="50" height="100%"
					   x="177" y="0"
					   cornerRadius="0"
					   borderVisible="false"
					   />
	
	<s:BitmapImage y="-1" source="@Embed(source='assets/windows/newlevel/topBg.png')" />
	
	<s:VGroup width="100%" height="100%" 
			  horizontalAlign="center" 
			  verticalAlign="top" gap="10"
			  >
		
		<s:VGroup height="145" width="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Label text="Новый уровень" fontFamily="mpbc" fontSize="48" color="0xf6da00" />
			<s:Label text="2" fontFamily="mpbc" fontSize="72" color="0xf6da00" />
			
			<s:filters>
				<s:DropShadowFilter color="0x914500" distance="1" />
			</s:filters>
		</s:VGroup>
		
		<s:HGroup width="100%" height="100%" verticalAlign="top" horizontalAlign="center"
				  paddingTop="20"
				  >
			<s:VGroup width="187" horizontalAlign="center">
				<s:BitmapImage source="@Embed(source='assets/windows/energy/bg.png')" smooth="true" scaleX="0.8" scaleY="0.8" />
				<s:Label text="{'Восстановление\nэнергии'}" color="0xf6da00" fontSize="18" fontFamily="mpbc"
						 textAlign="center"
						 />
				
				<s:filters>
					<s:DropShadowFilter color="0x914500" distance="1" />
				</s:filters>
			</s:VGroup>
			<s:VGroup width="100%" height="100%" horizontalAlign="center">
				
				<s:VGroup id="prizeGroup" height="100%" verticalAlign="top" horizontalAlign="right">
					<s:filters>
						<s:DropShadowFilter color="0x914500" distance="1" />
					</s:filters>
				</s:VGroup>
				
				<s:HGroup paddingBottom="20">
					<flexcomponents:PatternButton customLabel="Забрать" skinClass="skins.buttons.Pattern3ButtonS"
												  fontSize="26" fontSizeOver="26"
												  scale="1"
												  fontColor="0xfff19f"
												  click="getLevel();"
												  />
				</s:HGroup>
			</s:VGroup>
			
		</s:HGroup>
		
	</s:VGroup>
	
	<s:Group>
		<s:BitmapImage source="@Embed(source='assets/windows/newlevel/star.png')" 
					   rotation="-30"
					   smooth="true"
					   x="-230" y="50"
					   scaleX="0.55" scaleY="0.55"
					   />
		
		<s:BitmapImage source="@Embed(source='assets/windows/newlevel/star.png')" 
					   rotation="-5"
					   smooth="true"
					   x="-130" y="212"
					   scaleX="0.35" scaleY="0.35"
					   />
		
		<s:BitmapImage source="@Embed(source='assets/windows/newlevel/star.png')" 
					   rotation="30"
					   smooth="true"
					   x="410" y="30"
					   scaleX="0.3" scaleY="0.3"
					   />
		
		<s:BitmapImage source="@Embed(source='assets/windows/newlevel/star.png')" 
					   rotation="15"
					   smooth="true"
					   x="410" y="170"
					   scaleX="0.55" scaleY="0.55"
					   />
		
		<s:filters>
			<s:GlowFilter id="glow1" color="0xf6da00" alpha="0.8" blurX="20" blurY="20" />
			<s:GlowFilter id="glow2" color="0xf6da00" alpha="0.8" blurX="30" blurY="30" />
			<s:GlowFilter id="glow3" color="0xf6da00" alpha="0.8" blurX="40" blurY="40" />
		</s:filters>
	</s:Group>
	
	<s:controlBarContent/>
</s:Panel>