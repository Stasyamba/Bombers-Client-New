<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="418" height="166"
		 creationComplete="init();" xmlns:flexcomponents="components.common.flexcomponents.*">
	<fx:Script>
		<![CDATA[
			import skins.buttons.CloseButtonOriginS;
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.common.base.access.AccessManager;
			import components.common.base.access.rules.AccessRuleObject;
			import components.common.base.access.rules.AccessRuleType;
			import components.common.base.access.rules.levelrule.AccessLevelRule;
			import components.common.bombers.colors.BomberColorObject;
			
			import mx.collections.ArrayCollection;
			
			import skins.market.scroller.ScrollerS;
			
			[Bindable]
			public var colorCollection: ArrayCollection;
			
			public function init(): void
			{
				colorsList.scroller.setStyle("skinClass", ScrollerS);
				initColors();
				
				/* register update handler */
			}
			
			private function initColors(): void
			{
				for each(var co:BomberColorObject in Context.Model.bomberColorManager.getColors())
				{
					co.clearFailRules();
					
					var failedRules: Array = new Array();
					var accessObjects: Array = co.checkAccess();
					
					for each(var aro: AccessRuleObject in accessObjects) 
					{
						switch (aro.accessRule.getAccessRuleType()) 
						{
							case AccessRuleType.LEVEL_RULE:
								
								if(!aro.isSuccess)
								{
									co.addFailRule(aro.accessRule);
								}
								
								break;
							case AccessRuleType.BETA_RULE:
								
								co.addFailRule(aro.accessRule);
								
								break;
						}
					}
					
					co.gotColor = Context.Model.currentSettings.gameProfile.haveColor(co.color);
				}
				
				colorCollection = new ArrayCollection(Context.Model.bomberColorManager.getColors().concat());
				colorCollection.refresh();
			}
			
			private function hidePanel(): void
			{
				Context.Model.dispatchCustomEvent(ContextEvent.COLOR_PANEL_SHOW, false);
			}
			
		]]>
	</fx:Script>
	
	<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bg.jpg')"
					   backgroundImageFillMode="repeat"
					   width="100%" height="100%"
					   borderVisible="false"
					   cornerRadius="30"
					   >
		<s:filters>
			<s:DropShadowFilter distance="0" alpha="0.40" />
		</s:filters>
	</s:BorderContainer>
	
	<s:HGroup width="100%" height="100%" verticalAlign="top" horizontalAlign="center">
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:List id="colorsList" dataProvider="{colorCollection}" itemRenderer="components.pages.global.inventorynew.inventory.equip.color.ChooseColorIR"
					contentBackgroundAlpha="0" borderVisible="false">
				<s:layout>
					<s:VerticalLayout requestedRowCount="5" gap="0" />
				</s:layout>
			</s:List>
		</s:HGroup>
		<s:HGroup paddingTop="10" paddingRight="10">
			<flexcomponents:CloseButton skinClass="skins.buttons.CloseButtonOriginS" scale="0.6" click="hidePanel();" />	
		</s:HGroup>
	</s:HGroup>
	
	
</s:Group>
