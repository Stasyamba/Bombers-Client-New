<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 >
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.common.items.ItemType;
			import components.common.items.ItemViewObject;
			
			import mx.controls.Alert;
			import mx.managers.ToolTipManager;
				
			private var itemType:ItemType = null;
			private var itemViewObject: ItemViewObject;
			
			
			public function initContent(itemTypeP: ItemType):void 
			{
				if (itemTypeP != null)
				{
					bgEmptyAura.visible = false;
					itemType = itemTypeP;
					itemViewObject = Context.Model.itemsManager.getItem(itemType).viewObject;
					
					var imageURL: String =  itemViewObject.anotherImageURL;//Context.Model.itemsManager.getItem(itemType).viewObject.anotherImageURL;
					auraImage.source = imageURL;
				}else
				{
					itemType = null;
					bgEmptyAura.visible = true;
					auraImage.source = "";
				}
			}
			
			private function deleteAura():void 
			{
				if(itemType != null)
				{
					Context.Model.currentSettings.gameProfile.deleteAura(itemType, true);
					if (tooltipp)
					{
						ToolTipManager.destroyToolTip(tooltipp);
						tooltipp = null;
					}
				}
			}
			
			/* tool tip */
			
			private var tooltipp:*;	
			
			private function onMouseMove(e:MouseEvent):void
			{
				var X:int = e.localX + 20;
				var Y:int = e.localY + 50;
				
				if (tooltipp)
				{
					ToolTipManager.destroyToolTip(tooltipp);
					tooltipp = null;
				}
				
				var value:String = itemViewObject.name;
				tooltipp = ToolTipManager.createToolTip(value, 0, 0);
				
				// calculate the tooltip coordinates
				var pt:Point = new Point(X, Y);
				pt = e.currentTarget.localToGlobal(pt);
				pt.x = pt.x;
				pt.y = pt.y;
				
				tooltipp.x = pt.x - 10;
				tooltipp.y = pt.y - 40;
			}
			
			private function onMouseOut(e:MouseEvent):void
			{
				if (tooltipp)
				{
					ToolTipManager.destroyToolTip(tooltipp);
					tooltipp = null;
				}
			}
			
			/*   
				mouseMove="onMouseMove(event);"
				mouseOut="onMouseOut(event);"
			*/
			
		]]>
	</fx:Script>
	
	<s:Group id="baseGroup" click="deleteAura();">
		
		<s:BitmapImage id="bgImage" source="@Embed(source='assets/windows/inventory/auraSlotBG.jpg')">
			<s:filters>
				<s:DropShadowFilter alpha="0.3" distance="2" />
			</s:filters>
		</s:BitmapImage>
		<s:BitmapImage id="bgEmptyAura" source="@Embed(source='assets/windows/inventory/auraSlotEmptyBG.png')"/>
		
		<s:HGroup width="{bgImage.width}" height="{bgImage.height}"
				  horizontalAlign="center" verticalAlign="middle">
			<mx:Image id="auraImage"
					  trustContent="{Context.Model.trustContent}"
					  />
		</s:HGroup>
		
	</s:Group>
	
	
</s:Group>