<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:flexcomponents="components.common.flexcomponents.*"
		 width="60" height="60"
		 >
	
	<fx:Declarations>
		<s:Animate id="apearingA" target="{this}" duration="300"
				   effectStart="{this.alpha = 0;}"
				   >
			<s:SimpleMotionPath property="alpha" valueFrom="{this.alpha}" valueTo="1.0"/>
		</s:Animate>
		
		<s:Animate id="disapearingA" target="{this}" duration="300"
				   >
			<s:SimpleMotionPath property="alpha" valueFrom="{this.alpha}" valueTo="0.0"/>
		</s:Animate>
		
		<s:Animate id="appearingImageA" target="{weaponImageGroup}" duration="300">
			<s:SimpleMotionPath property="alpha" valueFrom="0" valueTo="1" />
		</s:Animate>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.common.items.ItemObject;
			import components.common.items.ItemProfileObject;
			import components.common.items.ItemViewObject;
			
			import mx.core.IToolTip;
			import mx.managers.ToolTipManager;
			
			private var itemProfileObject:ItemProfileObject = null;
			
			[Bindable]
			private var itemViewObject:ItemViewObject = null;
			[Bindable]
			private var itemCountStringView:String = "0";
			
			public function initContent(itemProfileObjectP: ItemProfileObject):void {
				itemProfileObject = itemProfileObjectP;
				
				var itemObject:ItemObject = Context.Model.itemsManager.getItem(itemProfileObject.itemType);
				
				itemViewObject = itemObject.viewObject;
				if(itemProfileObject.itemCount > 999)
				{
					itemCountStringView = "Много";
				}else
				{
					itemCountStringView = itemProfileObject.itemCount.toString() + " шт.";
				}
				
				
				apearingA.play();
			}
			
			private function weaponOn():void 
			{
				Context.Model.currentSettings.gameProfile.setWeaponLeftHand(itemProfileObject.itemType);
				Context.Model.dispatchCustomEvent(ContextEvent.IM_HIDE_COLLECTION);
			}
			
			private function deleteWeapon():void 
			{	
			}
			
			
			/* tool tip */
			
			private var tooltipp:*;	
			
			private function onMouseMove(e:MouseEvent):void
			{
				var X:int = e.localX + 20;
				var Y:int = e.localY + 50;
				
				if (tooltipp)
				{
					ToolTipManager.destroyToolTip(tooltipp);
					tooltipp = null;
				}
				
				//var value:String = "Ядерная бомба\n- Урон 40\n- Взрывная волная держится дольше";//"Position : (" + X + ", " + Y + ")"
				var value:String = itemViewObject.name;

				tooltipp = ToolTipManager.createToolTip(value, 0, 0);
				
				
				// calculate the tooltip coordinates
				var pt:Point = new Point(X, Y);
				pt = e.currentTarget.localToGlobal(pt);
				//pt.x = pt.x + 10 - tooltipp.width / 2 + 105;
				pt.x = pt.x;
				pt.y = pt.y;
				
				tooltipp.x = pt.x - 10;
				tooltipp.y = pt.y - 40;
			}
			
			private function onMouseOut(e:MouseEvent):void
			{
				if (tooltipp)
				{
					ToolTipManager.destroyToolTip(tooltipp);
					tooltipp = null;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group id="baseGroup" width="60" height="60" click="weaponOn();">
		
		<s:HGroup width="60" height="60"
				  id="weaponImageGroup"
				  horizontalAlign="center" verticalAlign="middle"
				  >
			<mx:Image source="{itemViewObject.smallImageURL}"
					  smoothBitmapContent="true"
					  trustContent="{Context.Model.trustContent}"
					  complete="appearingImageA.play()"
					  mouseMove="onMouseMove(event);"
					  mouseOut="onMouseOut(event);"
					  />
		</s:HGroup>
		
		<s:Group x="23" y="6"
				 >
			<s:Rect id="bgCountRect"
					width="31" height="11"
					alpha="0.69"
					>
				<s:fill>
					<s:SolidColor color="0xf2ed7f"/>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="0xc2b76a" />
				</s:stroke>
			</s:Rect>
			<s:HGroup width="100%" height="100%"
					  horizontalAlign="center" verticalAlign="middle">
				<s:Label id="countLabel"
						 text="{itemCountStringView}"
						 color="0x3a2810" fontFamily="mpr" fontSize="10"
						 />
			</s:HGroup>
			
		</s:Group>
	</s:Group>
	
	
</s:Group>