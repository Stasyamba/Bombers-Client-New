<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:market="components.pages.global.inventorynew.market.*"
		 creationComplete="init();" xmlns:flexcomponents="components.common.flexcomponents.*"
		 gap="20"
		 >
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.common.base.access.AccessManager;
			import components.common.base.access.rules.AccessRuleObject;
			import components.common.base.access.rules.levelrule.AccessLevelRule;
			import components.common.base.market.ItemMarketObject;
			import components.common.flexcomponents.PatternButton;
			import components.common.items.ItemObject;
			import components.common.items.ItemType;
			import components.common.items.ItemViewObject;
			import components.common.resources.ResourceObject;
			import components.common.resources.ResourcePrice;
			import components.common.resources.ResourceType;
			import components.common.utils.adjustcolor.ColorMatrix;
			import components.common.utils.adjustcolor.ColorMatrixObject;
			
			import mx.controls.Alert;
			
			import skins.buttons.Pattern3ButtonS;
			
			import spark.components.Button;
			import spark.layouts.VerticalAlign;
			import spark.primitives.BitmapImage;
			
			[Bindable]
			private var itemType: ItemType;
			
			[Bindable]
			private var itemName: String;
			[Bindable]
			private var itemDescribe: String;
			private var itemPrice: ResourcePrice;
			private var itemImageURL: String;
			private var itemMarketObject: ItemMarketObject;
			
			public function initContent(itemTypeP: ItemType): void
			{
				itemType = itemTypeP;
				var itemObject: ItemObject = Context.Model.itemsManager.getItem(itemType)
				var itemViewObject: ItemViewObject = itemObject.viewObject;
				itemName = itemViewObject.name;
				itemDescribe = itemViewObject.description;
				itemImageURL = itemViewObject.smallImageURL;
				itemMarketObject = Context.Model.marketManager.getItemPrice(itemType);
				itemPrice = Context.Model.marketManager.getItemPrice(itemType).price;
				
				
				
				var accessRulesObject:Array = AccessManager.checkAccessItem(itemType);
				var isLevelRuleSuccess:Boolean = false;
				
				for each(var aro:AccessRuleObject in accessRulesObject) {
					if (aro.accessRule is AccessLevelRule) {
						isLevelRuleSuccess = aro.isSuccess;
						
						if (!isLevelRuleSuccess) {
							accessLevelRuleFailed.text = "Необходим " + (aro.accessRule as AccessLevelRule).minimumLevel.toString() + " уровень";
						}
						
						break;
					}
				}
				
				if (isLevelRuleSuccess) {
					accessGroup.alpha = 0;
					buyGroup.alpha = 1;
				}else
				{
					accessGroup.alpha = 1;
					buyGroup.alpha = 0;
				}
				
				/* price cheking */
				
				var arrResources:Array = itemPrice.getResourceObjectArr();
				
				for each(var ro:ResourceObject in arrResources) 
				{
					switch(ro.type)
					{
						case ResourceType.GOLD:
							
							if(ro.value != 0 && ro.value <= 10000)
							{
								goldBuyGroup.alpha = 1;
							}
							
							break;
						case ResourceType.CRYSTALS:
							
							if(ro.value != 0 && ro.value <= 10000)
							{	
								crystallsBuyGroup.alpha = 1;
							}
							
							break;
					}
				}
			}
			
			private function init(): void
			{
				itemImage.source = itemImageURL;
				price.initContent(itemMarketObject.price);
				itemCount.text = itemMarketObject.amount.toString() +" шт.";
				
				/* var cm:ColorMatrix = new ColorMatrix();
				var cmo:ColorMatrixObject = new ColorMatrixObject(140, 1);
				cm.applyColorMatrixObject(cmo);
				
				buyForCrystallsButton.filters = [cm.filter]; */
			}
			
			private function buyItem(rt: ResourceType): void
			{
				//Alert.show("My Gold: "+Context.Model.currentSettings.gameProfile.resources.gold.toString()+"\n Item pirce Gold: "+ itemPrice.gold.toString());
				//Alert.show("My Cryst: "+Context.Model.currentSettings.gameProfile.resources.crystals.toString()+"\n Item pirce Cryst: "+ itemPrice.crystals.toString());
				
				switch(rt)
				{
					case ResourceType.GOLD:
						if(Context.Model.currentSettings.gameProfile.resources.gold.value >= itemPrice.gold.value)
						{
							Context.gameServer.sendBuyItemRequest(itemType, rt);
						}else
						{
							Context.Model.dispatchCustomEvent(ContextEvent.IM_NEED_RESOURCES);
						}
						
						break;
					
					case ResourceType.CRYSTALS:
						if(Context.Model.currentSettings.gameProfile.resources.crystals.value >= itemPrice.crystals.value)
						{
							Context.gameServer.sendBuyItemRequest(itemType, rt);
						}else
						{
							Context.Model.dispatchCustomEvent(ContextEvent.IM_NEED_RESOURCES);
						}
						
						break;
				}
				
				/* if(Context.Model.currentSettings.gameProfile.resources.isBiggerOrEqual(itemPrice))
				{
					Alert.show("Resource enough");
					Context.gameServer.sendBuyItemRequest(itemType);
				}else
				{
					Alert.show("Not enough resources");
					Context.Model.dispatchCustomEvent(ContextEvent.IM_NEED_RESOURCES);
				} */
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" horizontalAlign="center">
		<s:VGroup horizontalAlign="center" width="72">
			<s:HGroup height="50" verticalAlign="middle">
				<mx:Image id="itemImage" smoothBitmapContent="true" trustContent="{Context.Model.trustContent}" />
			</s:HGroup>
			
			<s:Label id="itemCount" fontFamily="mpr" fontSize="12" color="0xc29b2f" text="10 шт." />
			
		</s:VGroup>
		
		<s:VGroup gap="10">
			<s:Label text="{itemName}" fontFamily="mpbc" fontSize="18" color="0xfec935" maxWidth="194" />
			
			<s:HGroup verticalAlign="middle">
				<s:Label fontFamily="mpr" fontSize="14" color="0xc29b2f" text="Цена: " />
				<market:PricePanel id="price" />
			</s:HGroup>
			
			<s:Label text="{itemDescribe}" fontFamily="mpr" fontSize="12" color="0xc29b2f"
					 width="203"
					 />
		</s:VGroup>
	</s:HGroup>
	
	<s:Group width="100%">
		<s:HGroup id="accessGroup" width="100%" horizontalAlign="center" alpha="0">
			<s:Label id="accessLevelRuleFailed" fontFamily="mpr" fontSize="24" color="0xe86a05" />
		</s:HGroup>
		
		<s:VGroup id="buyGroup" width="100%" horizontalAlign="center" alpha="0" gap="10">
			
			<s:HGroup id="goldBuyGroup" verticalAlign="middle" alpha="0">
				<s:HGroup width="130" horizontalAlign="right" verticalAlign="middle">
					<s:Label text="Купить за золото" color="0xfec900" fontFamily="mpr" fontSize="14" />
				</s:HGroup>
				<flexcomponents:PatternButton skinClass="skins.buttons.Pattern2ButtonS"
											  scaleX="0.5" scaleY="0.5"
											  customLabel="Купить"
											  fontSize="28" fontSizeOver="28"
											  fontColor="0xfff19f"
											  click="buyItem(ResourceType.GOLD);"
											  />
			</s:HGroup>
			
			<s:HGroup id="crystallsBuyGroup" verticalAlign="middle" alpha="0">
				<s:HGroup width="130" horizontalAlign="right" verticalAlign="middle">
					<s:Label text="Купить за кристаллы" color="0xfec900" fontFamily="mpr" fontSize="14" />
				</s:HGroup>
				<flexcomponents:PatternButton id="buyForCrystallsButton" skinClass="skins.buttons.Pattern2ButtonS"
											  scaleX="0.5" scaleY="0.5"
											  customLabel="Купить"
											  fontSize="28" fontSizeOver="28"
											  fontColor="0xfff19f"
											  click="buyItem(ResourceType.CRYSTALS);"
											  />
			</s:HGroup>
			
		</s:VGroup>
	</s:Group>
	
	
	
	
</s:VGroup>
