<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          creationComplete="init();"
		  width="168" height="41"
          verticalAlign="middle" horizontalAlign="left"
          gap="15"
        >


    <fx:Declarations>

        <s:Parallel id="openingProccessA">
            <s:Animate id="appearingPopUpA" target="{mainPopUpContent}" duration="300"
                       effectStart="{mainPopUpContent.alpha = 0; isOpeningProccess = true; openToolTip(); }"
                       effectEnd="{isOpeningProccess = false;}"
                    >

                <s:SimpleMotionPath property="alpha" valueFrom="{mainPopUpContent.alpha}" valueTo="1.0"/>
            </s:Animate>

        </s:Parallel>

        <s:Parallel id="closingProccessA" duration="100">
            <s:Animate id="disAppearingPopUpA" target="{mainPopUpContent}"
                       effectStart="{isClosingProccess = true;}"
                       effectEnd="{closeToolTip(); isClosingProccess = false;}"
                    >

                <s:SimpleMotionPath property="alpha" valueFrom="{mainPopUpContent.alpha}" valueTo="0.0"/>
            </s:Animate>
			
        </s:Parallel>
    </fx:Declarations>

    <fx:Script>
		<![CDATA[
			import components.common.base.expirance.ExperianceObject;
			import components.common.utils.adjustcolor.ColorMatrix;

        [Bindable]
        private var levelStringView:String = "1";
			
        /* animation params */

        private var isMouseOnPopUp:Boolean = false;
        private var isMouseOnPreview:Boolean = false;

        private var isOpeningProccess:Boolean = false;
        private var isClosingProccess:Boolean = false;

        private var closeTimer:Timer = new Timer(100, 1);

        private function init():void {
            closeTimer.addEventListener(TimerEvent.TIMER_COMPLETE, timerCompleteHandler);
            closeTimer.stop();

            Context.Model.addCustomListener(ContextEvent.GP_EXPERIENCE_CHANGED, function (e:ContextEvent):void {
				setExpirance(Context.Model.currentSettings.gameProfile.experience);
            });

            if(Context.Model.currentSettings.gameProfileLoaded)
                setExpirance(Context.Model.currentSettings.gameProfile.experience);
			
			/* set dark side */
			
			var cm: ColorMatrix = new ColorMatrix();
			cm.adjustBrightness(-20,-20,-20);
			
			darkBgSide.filters = [cm.filter];
        }

        private function timerCompleteHandler(e:TimerEvent):void {
            closeTimer.reset();
            closeTimer.stop();

            if (!isMouseOnPreview && !isMouseOnPopUp && !isClosingProccess) {
                openingProccessA.stop();
                closingProccessA.play();
            }
        }

        /* open/close processes */

        private function openToolTipWrapper():void {
            if (!isOpeningProccess) {
                openingToolTipProcess();

                if (!isClosingProccess && !closeTimer.running) {
                    //dispatchEvent(new Event("toolTipCalledFirst"));
                    //blurDisapearing.play();
                }
            }
        }

        private function closeToolTipWrapper():void {
            closeTimer.start();
        }

        private function openingToolTipProcess():void {
            closingProccessA.stop();
            openingProccessA.play();
        }

        private function closingToolTipProcess():void {
            openingProccessA.stop();
            closingProccessA.play();
        }

        public function openToolTip():void {
            expirancePopUp.displayPopUp = true;
        }

        public function closeToolTip():void {
            expirancePopUp.displayPopUp = false;
        }

        /* expirance */

        private function expiranceChanged():void {
            // e type = ContextEvent;
            // read e.data.expirance


        }

        private function setExpirance(exp:int):void {
            var curentLevelObject:ExperianceObject = Context.Model.experianceManager.getLevel(exp);
            var nextLevelObject:ExperianceObject = Context.Model.experianceManager.getNextLevel(exp);

            var currentLevel:int = curentLevelObject.level;
            if (exp < 300) {
               // expToolTipLabel.text = "Сражайтесь, достигайте новых побед, вздувайте друзей в увлекательных онлайн боях!";
            } else {
               // expToolTipLabel.text = "Максимальный опыт который вы сможете набрать в бете 300 опыта, ждите релиза игры!";
            }

            levelStringView = currentLevel.toString();

            var currentPercent:Number = (exp - curentLevelObject.experiance) / (nextLevelObject.experiance - curentLevelObject.experiance);
            expiranceMaskRect.width = int(expiranceMaskRect.maxWidth * currentPercent);

			expLabel.text = "Ваш опыт: "+ exp.toString() + "/" + nextLevelObject.experiance.toString();
        }
        ]]>
	</fx:Script>

  
	
	<s:Group>
		<s:BitmapImage source="@Embed(source='assets/pageworld/toppanel/expirance/star.png')" />
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" 
				  paddingLeft="8" paddingTop="4"
				  >
			<s:Label id="levelLabel"
					 text="{levelStringView}" color="0xfee9ff"
					 fontFamily="mpbc" fontSize="24"
					 />
		</s:HGroup>
	</s:Group>

    <s:Group mouseOver="{ isMouseOnPreview = true; openToolTipWrapper(); }"
             mouseOut="{ isMouseOnPreview = false; closeToolTipWrapper(); }"
             useHandCursor="true" buttonMode="true"
            >

		<s:Rect height="24" width="110"
				alpha="0.2"
				x="-2" y="-2"
				>
			
			<s:fill>
				<s:SolidColor color="0x000000"/>
			</s:fill>
		
			<!--<s:filters>
				<s:BlurFilter blurX="2" blurY="2"/>
			</s:filters>-->
		</s:Rect>
		
        <s:Rect height="20" width="106"
                alpha="0.9"
                >

            <s:fill>
                <s:SolidColor color="0x000000"/>
            </s:fill>
            <s:stroke>
                <s:SolidColorStroke weight="2" color="0x3c3c3c"/>
            </s:stroke>
            <s:filters>
                <s:BlurFilter blurX="2" blurY="2"/>
            </s:filters>
        </s:Rect>


        <s:BitmapImage x="2" y="3"
                       source="@Embed(source='assets/pageworld/toppanel/expirance/bg.jpg')"
                       mask="{expiranceMask}"
                />

        <s:Group id="expiranceMask">
            <s:Rect id="expiranceMaskRect" height="20" width="103" maxWidth="103"
                    y="2" x="1"
                    >

                <s:fill>
                    <s:LinearGradient rotation="-90">
                        <s:GradientEntry color="0x311c38" ratio="0.0"/>
                        <s:GradientEntry color="0xab55a9" ratio="1.0"/>
                    </s:LinearGradient>
                </s:fill>

            </s:Rect>
        </s:Group>
    </s:Group>
	
	<s:PopUpAnchor id="expirancePopUp"
				   >
		
		<s:Group id="mainPopUpContent"
				 alpha="0"
				 mouseOver="{ isMouseOnPopUp = true; }"
				 mouseOut="{ isMouseOnPopUp = false; closeToolTipWrapper(); }"
				 >
			
			<s:Group x="-180" y="20">
				<s:BorderContainer width="186" height="57"
								   backgroundImage="@Embed(source='assets/windows/bgGrey.jpg')"
								   backgroundImageFillMode="repeat"
								   borderVisible="false"
								   >
					<s:filters>
						<s:DropShadowFilter inner="true" distance="-6" angle="90" blurX="0" blurY="30" alpha="1" />
					</s:filters>
				</s:BorderContainer>
				
				<s:BorderContainer width="186" height="30"
								   y="27"
								   backgroundImage="@Embed(source='assets/windows/bgGrey.jpg')"
								   backgroundImageFillMode="repeat"
								   borderVisible="false"
								   cornerRadius="0"
								   />
				
				
				<s:BorderContainer id="darkBgSide"
								   width="186" height="60"
								   y="31"
								   backgroundImage="@Embed(source='assets/windows/bgGrey.jpg')"
								   backgroundImageFillMode="repeat"
								   borderVisible="false"
								   cornerRadius="30"
								   />
				
				<s:BorderContainer width="186" height="60"
								   y="27"
								   backgroundImage="@Embed(source='assets/windows/bgGrey.jpg')"
								   backgroundImageFillMode="repeat"
								   borderVisible="false"
								   cornerRadius="30"
								   />
				
				<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
					<s:VGroup horizontalAlign="left">
						<s:Label id="expLabel" color="0xee8bff" fontFamily="mpr" fontSize="15" />
						<s:Label text="{levelStringView} уровень" 
								 color="0xee8bff" fontFamily="mpr" fontSize="15" />
					</s:VGroup>
				</s:VGroup>
			</s:Group>
			
			
		</s:Group>
	</s:PopUpAnchor>


</s:HGroup>
