<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="init();"
		 >
	
	
	<fx:Declarations>
		
		<s:Parallel id="bonusA" target="{bonusGroup}"
					effectStart="{bonusGroup.visible = true}"
					effectEnd="{bonusGroup.visible = false}"
					>
			<s:Animate duration="1800">
				<s:SimpleMotionPath property="alpha" valueFrom="1" valueTo="0"  />
			</s:Animate>
			
			<s:Animate duration="1800">
			<s:SimpleMotionPath property="x" valueTo="{bonusX-35}" valueFrom="{bonusGroup.x}" />
			</s:Animate>
			
			<s:Animate duration="1800">
			<s:SimpleMotionPath property="y" valueTo="{bonusY-20}" valueFrom="{bonusGroup.y}" />
			</s:Animate>
			
			<s:Animate duration="800">
			<s:SimpleMotionPath property="scaleX" valueTo="1.5" valueFrom="1" />
			</s:Animate>
			<s:Animate duration="800">
			<s:SimpleMotionPath property="scaleY" valueTo="1.5" valueFrom="1" />
			</s:Animate>
		</s:Parallel>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.common.base.CommonConstans;
			import components.common.friendslent.FriendObject;
			
			import engine.maps.mapObjects.bonuses.BonusExperience;
			import engine.profiles.GameProfile;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			[Bindable]
			private var friendsCurrentCollection: ArrayCollection;
			private var friends: Array;
			private var currentPage: int = 0;
			private static const FRIENDS_PER_PAGE: int = 7;
			
			[Bindable] private var bonusX: int;
			[Bindable] private var bonusY: int;
			
			private function init(): void
			{
				Context.Model.addCustomListener(ContextEvent.FRIENDS_PANEL_FRIENDS_IS_LOADED, friendsLoaded);
				Context.Model.addCustomListener(ContextEvent.FRIENDS_PANEL_GET_BONUS, getBonus);
			}
			
			private function getBonus(e: ContextEvent): void
			{
				if(e.data is FriendObject)
				{
					for(var i: int = 0; i<= friends.length - 1; i++)
					{
						if((friends[i] as FriendObject).profile.id == (e.data as FriendObject).profile.id)	
						{
							(friends[i] as FriendObject).isAskingForHelp = false;
							break;
						}
					}
					
					setPage(currentPage);
					
					var p: Point = new Point(mouseX, mouseY);
					
					bonusX = bonusGroup.x = p.x - 40;
					bonusY = bonusGroup.y = p.y - 20;
					
					bonusA.stop();
					bonusA.play();
				}else
				{
					Alert.show("Error e.data is not FriendObject | FriendPanel.mxml");
				}
			}
			
			private function friendsLoaded(e: ContextEvent): void
			{
				friends = new Array();
				
			 	var isFakeAsking: Boolean = false;
				var fakeGP: GameProfile = new GameProfile();
				fakeGP.photoURL = CommonConstans.FAKE_USER_IMAGE_URL;
				fakeGP.experience = 0;
			
				var fakeFO: FriendObject = new FriendObject(fakeGP, isFakeAsking);
				
				friends.push(fakeFO);
				 
				if(e.data is Array)
				{
					for each(var fo:FriendObject in e.data)
					{
						friends.push(fo);
					}
				}
				
				setPage(0);
			}
			
			private function setPage(page: int): void
			{
				if(page * FRIENDS_PER_PAGE < friends.length && page >= 0)
				{
					backButton.enabled = true;
					forwardButton.enabled = true;
					
					if(page == 0)
					{
						backButton.enabled = false;
					}
					
					friendsCurrentCollection = new ArrayCollection();
					
					for(var i: int = page*FRIENDS_PER_PAGE; i< (page + 1)*FRIENDS_PER_PAGE; i++)
					{
						if(i < friends.length)
						{
							friendsCurrentCollection.addItem(friends[i].clone());
							
							if(i == friends.length - 1)
							{
								forwardButton.enabled = false;
							}
						}else
						{
							forwardButton.enabled = false;
							break;
						}
					}
					
					if(friendsCurrentCollection.length < FRIENDS_PER_PAGE - 1)
					{
						for(var j: int = friendsCurrentCollection.length; j<= FRIENDS_PER_PAGE - 1; j++)
						{
							friendsCurrentCollection.addItem(null);
						}	
					}
					
					friendsCurrentCollection.refresh();
					currentPage = page;
				}
			}
			
			private function changePage(sign:int): void
			{
				setPage(currentPage + sign);
			}
			
		]]>
	</fx:Script>
	<s:HGroup verticalAlign="middle" height="170">
		<s:Button id="backButton" skinClass="skins.buttons.friendslent.LeftArrowButtonS" />
		
		<s:List id="friendsList" dataProvider="{friendsCurrentCollection}" itemRenderer="components.pages.world.subbottompanel.FriendIR"
				contentBackgroundAlpha="0" borderVisible="false"
				>
			<s:layout>
				<s:HorizontalLayout requestedColumnCount="7" gap="-17" />
			</s:layout>
		</s:List>
		
		<s:Button id="forwardButton" skinClass="skins.buttons.friendslent.RightArrowButtonS" />
	</s:HGroup>
	
	<s:HGroup id="bonusGroup" visible="false" verticalAlign="middle">
		<s:Label text="+20" fontFamily="mpbc" fontSize="34" color="0xfeceff" />
		<!--<s:BitmapImage source="@Embed(source='assets/pageworld/subbottompanel/star.png')" smooth="true" />-->
		<s:BitmapImage source="@Embed(source='assets/pageworld/subbottompanel/askSign.png')" smooth="true" />
		
		<s:filters>
			<s:GlowFilter color="0xeabeff" strength="2" />
			<s:GlowFilter color="0xeabeff" strength="1" blurX="20" blurY="20" />
		</s:filters>
	</s:HGroup>
	
</s:Group>
