<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:fields="components.pages.world.worlds.locations.fields.*"
		 xmlns:sattelite="components.pages.world.worlds.locations.sattelite.*" 
		 xmlns:sea="components.pages.world.worlds.locations.sea.*" 
		 xmlns:snowpeak="components.pages.world.worlds.locations.snowpeak.*" 
		 xmlns:castle="components.pages.world.worlds.locations.castle.*" 
		 xmlns:mines="components.pages.world.worlds.locations.mines.*" 
		 xmlns:moon="components.pages.world.worlds.locations.moon.*" 
		 xmlns:rocket="components.pages.world.worlds.locations.rocket.*" 
		 xmlns:ufo="components.pages.world.worlds.locations.ufo.*"
         creationComplete="init();"
         width="100%" height="100%" 
		 >


    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>


    <fx:Script>
		<![CDATA[
			import components.common.base.access.AccessManager;
			import components.common.base.access.rules.AccessRuleObject;
			import components.common.base.access.rules.AccessRuleType;
			import components.common.base.access.rules.levelrule.AccessLevelRule;
			import components.common.quests.regard.RegardObject;
			import components.common.quests.regard.RegardType;
			import components.common.superoffer.SuperOfferObject;
			import components.common.superoffer.SuperOfferType;
			import components.common.tutorial.TutorialPartType;
			import components.common.utils.HitTester;
			import components.common.utils.adjustcolor.ColorMatrix;
			import components.common.utils.adjustcolor.ColorMatrixObject;
			import components.common.worlds.locations.ILocationPreview;
			import components.common.worlds.locations.LocationType;
			import components.common.worlds.locations.LocationViewObject;
			import components.pages.world.windows.locationenter.LocationEnterW;
			
			import loading.SoundManager;
			
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import skins.buttons.OfferButtonS;

			private var selectedLocation:ILocationPreview = null;
			
	       
			
			private function mouseMoveHandler(e:MouseEvent):void 
			{
				var locationFinded:Boolean = false;
				
				for (var i:int = 0; i <= mainWorldGroup.numElements - 1; i++) 
				{
					var gl:* = mainWorldGroup.getElementAt(i);
					
					if (gl is ILocationPreview) 
					{
						if(Context.Model.currentTutorialPart == TutorialPartType.DONE)
						{
							if (HitTester.realHitTest(gl, new Point(mouseX, mouseY + 40))) // y="40" - parent panel
							{
								locationFinded = true;
								//mainWorldGroup.getElementAt(i) as DisplayObject
								
								selectedLocation = mainWorldGroup.getElementAt(i) as ILocationPreview;
								setLocationPreviewOverStateNew(selectedLocation);
								
								/* hide over state for other locations */
								for (var j:int = i - 1; j >= 0; j--) 
								{
									(mainWorldGroup.getElementAt(j) as ILocationPreview).setOver(false);
								}
								
							} else {
								(mainWorldGroup.getElementAt(i) as ILocationPreview).setOver(false);
							}
						}
					}
				}
				
				if (!locationFinded) {
					selectedLocation = null;
					//CursorManager.removeAllCursors();
				}
			}
			
			/* optimized */
			private var colors: Dictionary = new Dictionary();
			
			private function fillColors():void
			{
				colors = new Dictionary();
				
				var cm: ColorMatrix = new ColorMatrix();
				cm.desaturate();
				
				for(var i: int = 0; i <= mainWorldGroup.numElements - 1; i++)
				{
					var el:* = mainWorldGroup.getElementAt(i);
					
					if(el is ILocationPreview)
					{
						var lType: LocationType = (el as ILocationPreview).getLocationType();
						var rObjects: Array = AccessManager.checkAccessLocation(lType);
						
						var betaRuleDone:Boolean = true;
						var openedLocationsRuleDone:Boolean = true;
						var allRuleDone:Boolean = true;
						
						var isLocationOpenedInProfile:Boolean = false;
						
						
						for each(var ol:LocationType in Context.Model.currentSettings.gameProfile.openedLocations) 
						{
							if (ol == lType) {
								isLocationOpenedInProfile = true;
								break;
							}
						}
						
						
						var levelNeeded: int = 0;
						
						for each(var o:AccessRuleObject in rObjects) {
							if (o.accessRule.getAccessRuleType() == AccessRuleType.BETA_RULE) {
								betaRuleDone = o.isSuccess;
							}
							
							if (o.accessRule.getAccessRuleType() == AccessRuleType.OPENED_LOCATIONS_RULE) {
								openedLocationsRuleDone = o.isSuccess;
							}
							
							if (!o.isSuccess) {
								allRuleDone = false;
							}
							
							if(o.accessRule.getAccessRuleType() == AccessRuleType.LEVEL_RULE)
							{
								levelNeeded = (o.accessRule as AccessLevelRule).minimumLevel;
							}
							
						}
						
						var saturationShift:Number = 1;
						var hueShift:int = 0;
						
						if (!betaRuleDone) {
							
							//(el as ILocationPreview).setLock(true, true, levelNeeded);
							
							/* desasture */
							(el as DisplayObject).filters = [cm.filter];
							
							// RED
							
							saturationShift = 4;
							hueShift = -45;
							
							if (lType == LocationType.WORLD1_MOON) {
								hueShift = -155;
								saturationShift = 15;
							}
							
						} else if (!openedLocationsRuleDone) {
							
							//(el as ILocationPreview).setLock(true, true, levelNeeded);
							
							/* desasture */
							(el as DisplayObject).filters = [cm.filter];
							
							// RED
							
							saturationShift = 4;
							hueShift = -45;
							
							if (lType == LocationType.WORLD1_MOON) {
								hueShift = 80;
							}
							
						} else if (!allRuleDone || !isLocationOpenedInProfile) {
							//(el as ILocationPreview).setLock(false, false, 0);
							
							// YELLOW
							// by default
							
						} else if (allRuleDone) {
							
							(el as ILocationPreview).setLock(false, false, 0);
							
							// GREEN
							saturationShift = 3.5;
							hueShift = 35;
						}
						
						
						/* set color */
						colors[lType] = {sShift: saturationShift, hShift: hueShift};
					}
				}
			}
			
			private function setLocationPreviewOverStateNew(location: ILocationPreview):void 
			{
				var lType:LocationType = (location as ILocationPreview).getLocationType();
				location.setOver(true, colors[lType].hShift, colors[lType].sShift);
			}
			
			private function mouseClickHandler(e:MouseEvent):void {
				if (selectedLocation != null) {
					selectedLocation.setOver(false);
					openLocation(selectedLocation.getLocationType());
				}
			}
			
			private function openLocation(locationType: LocationType): void
			{
				var locationViewObject:LocationViewObject = Context.Model.locationViewManager.getLocationViewObject(locationType);
				
				if (locationViewObject != null) {
					
					var lew:LocationEnterW = new LocationEnterW();
					lew.locationType = locationViewObject.locationType;
					lew.y = 98;
					
					PopUpManager.addPopUp(lew, (parentApplication as Bombers), false);
				}
			}

			
			private function init():void 
			{	
				if (!mainWorldGroup.hasEventListener(MouseEvent.MOUSE_MOVE)) {
					mainWorldGroup.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				}
				
				if (!mainWorldGroup.hasEventListener(MouseEvent.CLICK)) {
					mainWorldGroup.addEventListener(MouseEvent.CLICK, mouseClickHandler);
				}
				
				Context.Model.addCustomListener(ContextEvent.WORLD_LOCATIONS_FILL_COLORS, function (e: ContextEvent): void
				{
					fillColors();
				});
				
				/* set background animations */
				
				Context.Model.addCustomListener(ContextEvent.WORLD_ANIMATION_VISIBLE, function (e: ContextEvent): void
				{
					/* if(e.data)
					{
						snowSprite2.addChild(new Snow());
						snowSprite3.addChild(new Snow());
					}else
					{
						for(var i: int = 0; i<= snowSprite2.numChildren - 1; i++)
						{
							snowSprite2.removeChildAt(0);	
						}
						
						for(i = 0; i<= snowSprite3.numChildren - 1; i++)
						{
							snowSprite3.removeChildAt(0);	
						}
						
						Alert.show("snowSprite2 ch "+snowSprite2.numChildren.toString() + "\nsnowSprite3 ch " + snowSprite3.numChildren.toString());
					} */
				});
				
				//snowSprite1.addChild(new Snow());
				//snowSprite2.addChild(new Snow());
				//snowSprite3.addChild(new Snow());
				//snowSprite4.addChild(new Snow());
				
				
				waterSprite.addChild(new Water());
				
			}
			
			private function openOffer(): void
			{
				/* teting */
				
				Context.Model.dispatchCustomEvent(ContextEvent.SUPER_OFFER_OPEN, 
					new SuperOfferObject(
						SuperOfferType.GET_PRIZE,
						1,
						"http://www.vensella.ru/eg/superQuestEnergy.jpg",
						"",
						2,
						[
							new RegardObject(RegardType.RESOURCE_ENERGY, 30)
						],
						0
					));
			}

        ]]>
	</fx:Script>

    
		
	<s:BorderContainer width="100%" height="444"
					   backgroundColor="0x000000"
					   >
		
		<s:BitmapImage source="@Embed(source='assets/pageworld/worlds/worldBg.jpg')"/>
		
		<s:SpriteVisualElement id="snowSprite1" x="0" y="96" scaleX="0.7" scaleY="0.7" blendMode="screen" alpha="0.6" />
		<s:SpriteVisualElement id="snowSprite2" x="242" y="96" scaleX="0.8" scaleY="0.8" blendMode="screen" alpha="0.8" />
		<s:SpriteVisualElement id="snowSprite3" x="489" y="96" scaleX="0.8" scaleY="0.8" blendMode="screen" alpha="0.8" />
		<s:SpriteVisualElement id="snowSprite4" x="716" y="96" scaleX="0.7" scaleY="0.7" blendMode="screen" alpha="0.6" />
		
		<s:SpriteVisualElement id="waterSprite" x="0" y="176" scaleX="1" scaleY="1" blendMode="lighten" alpha="0.4" />
		
		<s:Group id="mainWorldGroup" width="100%" height="100%">
			<fields:LocationPreview x="240" y="249" />
			<mines:LocationPreview x="0" y="270"/>
			<castle:LocationPreview x="477" y="247"/>
			<sea:LocationPreview x="664" y="221"/>
			<snowpeak:LocationPreview x="355" y="120"/>
			<ufo:LocationPreview x="194" y="124"/>
			<rocket:LocationPreview x="623" y="25"/>
			<sattelite:LocationPreview x="372" y="0"/>
			<moon:LocationPreview x="124" y="10"/>
		</s:Group>
		
		<!--<s:Button x="10" y="20" skinClass="skins.buttons.OfferButtonS" buttonMode="true" useHandCursor="true"
				  click="openOffer();"
				  />-->
		
	</s:BorderContainer>
	
	

</s:Group>
