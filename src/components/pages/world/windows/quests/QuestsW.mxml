<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:mx1="library://ns.adobe.com/flex/halo"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 creationComplete="panelCreationComplete();"
		 borderVisible="false"
		 dropShadowVisible="false"
		 skinClass="skins.common.EmptyPopUpS"
		 width="452" height="409"
		 xmlns:flexcomponents="components.common.flexcomponents.*"
		 implements="components.common.base.window.IWindow" 
		 xmlns:preloaders="components.common.utils.preloaders.*"
		 y="-450" alpha="0"
		 >
	<fx:Script>
		<![CDATA[
			import loading.SoundManager;
			
			import skins.buttons.CloseButtonOriginS;
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<s:Sequence id="disapearingAnimation" effectEnd="{close();}">
			<!--<s:Animate target="{this}" duration="500">
			<s:SimpleMotionPath property="x"
			valueFrom="100"
			valueTo="800"
			/>
			</s:Animate>-->
			<s:Animate target="{this}" duration="200">
				<s:SimpleMotionPath property="alpha"
									valueFrom="{this.alpha}"
									valueTo="0"
									/>
			</s:Animate>
		</s:Sequence>
		
		<s:Parallel id="apearingAnimation" startDelay="400">
			<s:Sequence><!--effectStart="{this.y = -450}"-->
				<s:Animate target="{this}" duration="500" effectStart="{SoundManager.play(SoundManager.WINDOW_MOVE_OPENING,0.6);}">
					<s:SimpleMotionPath property="y"
										valueFrom="-450" valueTo="100"
										/>
				</s:Animate>
				<s:Animate target="{this}" duration="100">
					<s:SimpleMotionPath property="y"
										valueFrom="100" valueTo="60"
										/>
				</s:Animate>
			</s:Sequence>
			
			<s:Animate target="{this}" duration="500">
				<s:SimpleMotionPath property="alpha"
									valueFrom="{this.alpha}"
									valueTo="1"
									/>
			</s:Animate>
		</s:Parallel>
		
		
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.common.tutorial.TutorialPartType;
			import mx.core.ScrollPolicy;
			import components.pages.world.windows.tutorial.part2.TutorialQuestsEnterToolTip;
			import greensock.TweenMax;
			import skins.quests.scroller.ScrollerS;
			import components.common.quests.medals.MedalObject;
			import mx.collections.ArrayCollection;
			import components.common.base.access.rules.medalrule.AccessMedalRule;
			import components.common.quests.QuestObject;
			import components.common.base.access.AccessManager;
			import components.common.base.access.rules.AccessRuleObject;
			import components.common.base.access.rules.AccessRuleType;
			import components.common.base.access.rules.IAccessRule;
			import components.common.base.access.rules.itemrule.AccessItemRule;
			import components.common.base.access.rules.levelrule.AccessLevelRule;
			import components.common.base.access.rules.locationrule.AccessOpenedLocationsRule;
			import components.common.items.ItemProfileObject;
			import components.common.items.ItemType;
			import components.common.worlds.locations.LocationType;
			import components.common.worlds.locations.LocationViewObject;
			
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.managers.PopUpManager;
			
			/*   set from outside when windows is creatig   */
			public var locationType:LocationType = null;
			public var quests: Array = null;
			[Bindable]
			public var questsCollection: ArrayCollection;
			
			
			public function close():void {
				Context.Model.removeCustomEventListener(ContextEvent.NEED_TO_CLOSE_LOCATION_QUESTS, closeWrapper1);
				
				//Context.Model.windowsManager.deleteWindow(this);
				PopUpManager.removePopUp(this);
			}
			
			public function closeWrapper():void {
				disapearingAnimation.play();
			}
			
			private function panelCreationComplete():void {
				//Context.Model.windowsManager.closeAll(true);
				//Context.Model.windowsManager.addWindow(this);
				
				if(locationType != null)
				{
					initContent();
				}else
				{
					Alert.show("Error: locationType is null | QuestsW");
					closeWrapper();
				}
				
				
				questList.scroller.setStyle("skinClass", ScrollerS);
				Context.Model.addCustomListener(ContextEvent.NEED_TO_CLOSE_LOCATION_QUESTS, closeWrapper1);
			
			}
			
			private function closeWrapper1(e:ContextEvent): void
			{
				closeWrapper();
			}
			
			private function initContent():void {
				
				if (locationType != null) 
				{
					locationLabel.text = "Список миссий ("+Context.Model.locationViewManager.getLocationViewObject(locationType).name+")";
					
					quests = Context.Model.questManager.getQuests(locationType).concat();
					
					for each(var q: QuestObject in quests)
					{
						var accessObjects: Array = AccessManager.checkAccessQuest(q.id);
						
						for each(var aro: AccessRuleObject in accessObjects) 
						{
							switch (aro.accessRule.getAccessRuleType()) 
							{
								case AccessRuleType.MEDAL_RULE:
									
									if(!aro.isSuccess)
									{
										q.addFailRule(aro.accessRule);
									}
									break;
							}
						}
						
						/* 
						   	q.setBestPlayer()
						*/
						
						q.clearMedals();
						
						for each(var mo: MedalObject in Context.Model.currentSettings.gameProfile.medals)
						{
							if(mo.questId == q.id)
							{
								q.addMedal(mo.medalType);
								break;
							}
						}
						
					}
					
					questsCollection = new ArrayCollection(quests);
					questsCollection.refresh();
					
					/* is tutorial now */
					if(Context.Model.currentTutorialPart != TutorialPartType.DONE)
					{
						closeButton.visible = false;
						tutorialGroup.addElement(new TutorialQuestsEnterToolTip());
						questList.setStyle("verticalScrollPolicy",ScrollPolicy.OFF);
					}else
					{
						tutorialGroup.removeAllElements();
					}
					
					apearingAnimation.play();
				} else 
				{
					Alert.show("Error: locationType is null | QuestsW");
				}
			}
			
		]]>
	</fx:Script>
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bg.jpg')"
					   backgroundImageFillMode="repeat"
					   width="100%" height="100%"
					   cornerRadius="50"
					   borderVisible="true"
					   borderColor="0x322a17" borderWeight="3"
					   />
	
	<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bgDark.jpg')"
					   backgroundImageFillMode="repeat"
					   width="100%" height="123"
					   cornerRadius="50"
					   borderVisible="false"
					   />
	
	<s:BorderContainer backgroundImage="@Embed(source='assets/windows/bg.jpg')"
					   backgroundImageFillMode="repeat"
					   width="100%" height="70"
					   y="56"
					   cornerRadius="0"
					   borderVisible="false"
					   />
	
	
	<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="top" gap="15">
		
		<s:HGroup width="100%" height="68"
				  horizontalAlign="center" verticalAlign="middle">
			<s:Label id="locationLabel" fontFamily="mpr" color="0xffe760" fontSize="18" />
		</s:HGroup>
		
		<s:List id="questList" dataProvider="{questsCollection}" itemRenderer="components.pages.world.windows.quests.QuestIR"
				borderVisible="false" contentBackgroundAlpha="0"
				>
			<s:layout>
				<s:VerticalLayout requestedRowCount="3" gap="7" />
			</s:layout>
		</s:List>
		
	</s:VGroup>
	
	<flexcomponents:CloseButton id="closeButton" skinClass="skins.buttons.CloseButtonOriginS" x="380" y="15" scale="0.8"
								click="closeWrapper();"
								/>
	
	
	<s:Group id="tutorialGroup" x="274" y="263" />
	
	<s:controlBarContent/>
</s:Panel>